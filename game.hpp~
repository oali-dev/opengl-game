#ifndef GAME_HPP
#define GAME_HPP

#include <GL/glew.h>
#include <SFML/OpenGL.hpp>
#include <SFML/Window.hpp>
#include <SFML/Graphics.hpp>
#include <vector>
#include <string>
#include <fstream>
#include "renderable.hpp"
#include "skybox.hpp"
#include "btBulletDynamicsCommon.h"
#include "BulletCollision/CollisionDispatch/btGhostObject.h"
#include "BulletDynamics/Character/btKinematicCharacterController.h"

#define MAX_BONES 64

class Game
{
public:
	Game();
	~Game();
	int startGame();
	void initializeProgram();
	void initializeVertexBuffer();
	void display();
	void init();
	void initFramebuffer();
	GLuint createShader(GLenum eShaderType, const std::string &strShaderFile);
	GLuint createProgram(const std::vector<GLuint> &shaderList);
	std::string parseShader(const char* filename);

private:
	void gameLoop();
	sf::Clock m_clock;
	sf::RenderWindow m_window;
	//std::vector<Renderable*> m_renderables;
	std::vector<StaticRenderable*> m_static_renderables;
	std::vector<DynamicRenderable*> m_dynamic_renderables;
	DynamicRenderable* m_player;
	Skybox m_skybox;
	float m_gravity;

	//btPairCachingGhostObject* ghostObject2;

	GLuint frameBufferProgramID;
	GLuint frameBufferObject;
	GLuint frameBufferTexture;
	GLuint frameBufferQuadVAO;
	GLuint frameBufferQuadVBO;
	GLuint depthBuffer;
	GLuint fbTextureUnif;
	GLuint fbTimeUnif;

	GLuint programID;
	GLuint samplerUnif;
	GLuint lightPositionUnif;
	GLuint kaUnif;
	GLuint kdUnif;
	GLuint ksUnif;
	GLuint shininessUnif;
	GLuint laUnif;
	GLuint ldUnif;
	GLuint lsUnif;
	GLuint modelViewMatrixUnif;
	GLuint normalMatrixUnif;
	GLuint projectionMatrixUnif;
	GLuint MVPUnif;
	GLuint boneMatricesUnif[MAX_BONES];
	GLuint isDynamicUnif;

	GLuint skyboxProgramID;
	GLuint skyboxMVPUnif;
	GLuint skyboxSamplerUnif;
	glm::mat4 skyboxScale;

	glm::mat4 projectionMatrix;
	glm::mat4 viewMatrix;

	glm::vec3 cameraPos;
	float cameraAngleHorizontal;
	float cameraAngleVertical;
	float cameraDistance;
	float cameraHeight;
	float cameraRotationSpeed;
};

#endif
